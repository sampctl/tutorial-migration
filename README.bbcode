[COLOR="#FF4700"][SIZE="7"][B]Migrating from Pawno to sampctl[/B][/SIZE][/COLOR]

Tutorial for migrating from an old-school Pawno environment to a nice new sampctl environment!

The goal of this tutorial is to help you drop “The Pawno Way” once and for all. What I mean when I say “The Pawno Way” is:

[LIST]

[*]Storing all your includes in a single, monolithic and confusing [FONT="courier new"]includes[/FONT]
folder.

[*]Manually downloading includes from file hosting sites with no regard for
versioning or updates.

[*]Using the old compiler with no real knowledge of how it’s being invoked or how
to truly take advantage of its features

[*]Getting confused when you try to use YSI but it complains about amx_assembly,
so you download it and it still doesn’t work, so you google it and you search
on the forums and… agh! why won’t it work!? Isn’t there an easier way?


[/LIST]

This tutorial makes a few assumptions:

[LIST]

[*]You know what sampctl is and vaguely how to use it.

[*]You’re using Windows - as far as I know, most users are on Windows but the
tools (vscode, sampctl) work on all platforms.

[*]Your gamemode script is in a folder named [FONT="courier new"]gamemodes[/FONT]

[*]You use [FONT="courier new"]#include <>[/FONT] for including external scripts

[*]You (may) use [FONT="courier new"]#include ""[/FONT] for including internal scripts (“modules”)


[/LIST]

You should learn the basics of sampctl and get a devleopment environment set up first, [URL="http://forum.sa-mp.com/showthread.php?t=651240"]this will only take you 10 minutes![/URL].

[COLOR="RoyalBlue"][SIZE="6"][B]Turning your Gamemode into a Package[/B][/SIZE][/COLOR]

A gamemode can be a [URL="https://github.com/Southclaws/sampctl/wiki/Packages"]Pawn Package[/URL] just like any other. Just like what you created in the “Hello World” tutorial. Your [b]server directory[/b] probably looks something like this:

[CODE]
.
├── announce.exe
├── filterscripts/
├── gamemodes/
│   ├── gamemode.amx
│   └── gamemode.pwn
├── pawno/
│   └── include/
│       └── a_samp.inc (etc...)
├── plugins/
├── samp-npc.exe
├── samp-server.exe
├── scriptfiles/
└── server.cfg
[/CODE]

The goal of this is to get rid of that [FONT="courier new"]pawno[/FONT] directory forever. It holds 3 things: a bad text editor, an out of date compiler and an unorganised pile of include files.

So first, just run [FONT="courier new"]sampctl package init[/FONT] to generate a [FONT="courier new"]pawn.json[/FONT]/[FONT="courier new"]pawn.yaml[/FONT] package definition file and create a [FONT="courier new"]dependencies[/FONT] directory:

[CODE]
.
├── announce.exe
├── dependencies/
│   ├── pawn-stdlib/
│   └── samp-stdlib/
├── filterscripts/
├── gamemodes/
│   ├── gamemode.amx
│   └── gamemode.pwn
├── pawn.json
├── pawno/
│   └── include/
│       └── a_samp.inc (etc...)
├── plugins/
├── samp-npc.exe
├── samp-server.exe
├── scriptfiles/
└── server.cfg
[/CODE]

Two useful things happen here

[LIST]

[*]“Choose an entry point” should detect your gamemode so you can select it and
add it to the package [FONT="courier new"]entry[/FONT] and [FONT="courier new"]output[/FONT] fields - this allows you to build
your gamemode.

[*]“Scan for dependencies” will run through your source code looking for popular
[FONT="courier new"]#include[/FONT]s and automatically add their proper names as dependencies.


[/LIST]

[COLOR="DeepSkyBlue"][SIZE="5"][B]Dealing with “Legacy” Includes[/B][/SIZE][/COLOR]

Now you may not want to perform the full migration all at once. And that’s fine, you might be dependent on outdated includes or includes that have been deleted. So what you can do is create a temporary folder to store includes in while you migrate. This will allow you to gradually switch to using package dependencies one include at a time, instead of doing it all at once.

[LIST]

[*]First, create a folder called [FONT="courier new"]legacy[/FONT]


[*]Then drop all your [FONT="courier new"].inc[/FONT] files from [FONT="courier new"]pawno/include[/FONT] in there


[*]Finally, delete all the [FONT="courier new"]a_[/FONT] files, such as [FONT="courier new"]a_samp.inc[/FONT] - you don’t need
these because they are in [FONT="courier new"]dependencies/samp-stdlib[/FONT] already because the
“SA:MP Standard Library” is a dependency of your package. You also need to
delete the following files because they are part of the Pawn Standard Library,
which is also now stored in [FONT="courier new"]dependencies/pawn-stdlib[/FONT]:

[LIST]
[*][FONT="courier new"]core.inc[/FONT]

[*][FONT="courier new"]datagram.inc[/FONT]

[*][FONT="courier new"]file.inc[/FONT]

[*][FONT="courier new"]float.inc[/FONT]

[*][FONT="courier new"]string.inc[/FONT]

[*][FONT="courier new"]time.inc[/FONT]

[/LIST]


[/LIST]

You now have a folder named [FONT="courier new"]legacy[/FONT] which contains all the old include files but sampctl has no knowledge of it.

To solve that, all you need to do is add the following block to your Package Definition File:

[PHP]
  "builds": [
    {
      "name": "main",
      "includes": ["includes"]
    }
  ]
[/PHP]

I know not everyone is familiar with manipulating JSON, so assuming your [FONT="courier new"]pawn.json[/FONT] looks like this:

[PHP]
{
  "user": "Southclaws",
  "repo": "myserver",
  "entry": "gamemodes/gamemode.pwn",
  "output": "gamemodes/gamemode.amx",
  "dependencies": ["sampctl/samp-stdlib"]
}
[/PHP]

After, it should look like this:

[PHP]
{
  "user": "Southclaws",
  "repo": "myserver",
  "entry": "gamemodes/gamemode.pwn",
  "output": "gamemodes/gamemode.amx",
  "dependencies": ["sampctl/samp-stdlib"],
  "builds": [
    {
      "name": "main",
      "includes": ["legacy"]
    }
  ]
}
[/PHP]

Note the extra comma after the [FONT="courier new"]dependencies[/FONT] block. Commas in JSON have the same rules as commas in arrays in Pawn: the last element doesn’t have a comma after it.

[COLOR="SlateGray"][SIZE="5"]Explanation[/SIZE][/COLOR]

So what that does is it adds a [FONT="courier new"]build config[/FONT] to the package. A [FONT="courier new"]build config[/FONT] is a way of changing how the compiler is run. A package can have multiple builds, but you probably don’t need to worry about that just yet.

The fact that we added a single build means it’ll be used automatically when you run [FONT="courier new"]sampctl package build[/FONT] because this command always picks the first build config in the list and merges its settings with some defaults. By adding the [FONT="courier new"]includes[/FONT] field, we initialise the list of [i]include paths[/i] with the name of the folder we created. During the build process, this list grows in size as all the directories in [FONT="courier new"]dependencies[/FONT] are added. You can read more about how this works [URL="https://github.com/Southclaws/sampctl/wiki/How-Builds-Work"]here[/URL].

[COLOR="DeepSkyBlue"][SIZE="5"][B]Building[/B][/SIZE][/COLOR]

Now you have your legacy includes directory set up and the gamemode source and output files defined, you should be able to run [FONT="courier new"]sampctl package build[/FONT] and it’ll just work.

Once you’ve got it building the same as it was before, you can start to migrate from the old includes method to package dependencies.

[COLOR="DeepSkyBlue"][SIZE="5"][B]Migrating an Include[/B][/SIZE][/COLOR]

I’ll quickly run through an example of migrating Incognito’s Streamer from the Pawno method to the sampctl method.

[COLOR="SlateGray"][SIZE="5"]Step 1: Identify what version you’re using[/SIZE][/COLOR]

Go into your [FONT="courier new"]legacy[/FONT] folder, locate [FONT="courier new"]streamer.inc[/FONT], open it and check the version number. The latest (as of writing this) is 2.9.3 but some people had issues with the 2.9.x branch so a lot of people stuck with 2.8.2.

Whatever the version, write it down somewhere.

[COLOR="SlateGray"][SIZE="5"]Step 2: Delete [FONT="courier new"]streamer.inc[/FONT][/SIZE][/COLOR]

You need to delete the original because if two include files with the same name exist in any of the include paths, the compiler doesn’t know which one you want to use. Fortunately, sampctl will warn you of this!

[COLOR="SlateGray"][SIZE="5"]Step 3: Install the streamer package[/SIZE][/COLOR]

Run [FONT="courier new"]sampctl package install samp-incognito/samp-streamer-plugin:VERSION[/FONT] where [FONT="courier new"]VERSION[/FONT] is that version number you wrote earlier.

For example, if I wanted to stay on 2.8.2 for stability reasons: [FONT="courier new"]sampctl package install samp-incognito/samp-streamer-plugin:2.8.2[/FONT]

[i]However[/i] you can omit the [FONT="courier new"]:[/FONT] and the version at the end of the command and [b]live on the edge![/b] This means you will [i]always[/i] have the latest version whenever you run [FONT="courier new"]sampctl package ensure[/FONT].

[COLOR="RoyalBlue"][SIZE="6"][B]Migrating from [FONT="courier new"]server.cfg[/FONT][/B][/SIZE][/COLOR]

Another great feature of sampctl is the ability to manage your server configuration [i]and[/i] act as a live server runner and crash-restarter. It can also automatically download plugins for you.

For this, all you need is a [FONT="courier new"]samp.json[/FONT] which is the new way to configure servers. To set that up, simply run [FONT="courier new"]sampctl server init[/FONT].

This will ask you a couple of questions and generate a [FONT="courier new"]samp.json[/FONT]/[FONT="courier new"]samp.yaml[/FONT] file, you can now configure your server using this instead of the weird proprietary server.cfg format.

Run [FONT="courier new"]sampctl server run[/FONT] to run your server.

[COLOR="RoyalBlue"][SIZE="6"][B]Conclusion[/B][/SIZE][/COLOR]

So now you have your server set up to work with sampctl! [URL="https://github.com/Southclaws/sampctl/wiki/"]Go check out the docs[/URL] for more information and to see what else sampctl can do to make your development process and server management life easier.

